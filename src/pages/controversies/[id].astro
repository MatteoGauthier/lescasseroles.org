---
import { getCollection, render, getEntry, getEntries } from "astro:content"
import Layout from "../../layouts/Layout.astro"
import { coerce } from "astro:schema"
import type { CollectionEntry } from "astro:content"
import { Image } from "astro:assets"

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const controversies = await getCollection("controversy")
  return controversies.map((controversy) => ({
    params: { id: controversy.id },
    props: { controversy },
  }))
}
// 2. For your template, you can get the entry directly from the prop
const { controversy } = Astro.props
const { Content } = await render(controversy)

const entities = await getEntries(controversy.data.entities)
const categories = await getEntries(controversy.data.categories)

let informationSources = new Map<string, CollectionEntry<"source">["data"]>()

for (const source of controversy.data.sources) {
  const infoSources = source.source

  if (infoSources && infoSources.length > 0) {
    for (const infoSource of infoSources) {
      const sourceEntry = await getEntry("source", infoSource.id)
      if (sourceEntry) {
        informationSources.set(infoSource.id, sourceEntry.data)
      }
    }
  }
}
---

<Layout title={controversy.data.title}>
  <div class="container mx-auto py-8">
    <div class="max-w-4xl mx-auto">
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 mb-8">
        <!-- Header -->
        <div class="mb-6">
          <div class="flex items-center justify-between mb-4">
            <h1 class="text-3xl font-bold text-gray-900">{controversy.data.title}</h1>
            <div class="flex items-center gap-3">
              <span
                class:list={[
                  "px-3 py-1 text-sm font-medium rounded-full",
                  {
                    "bg-red-100 text-red-800": controversy.data.impact === "MAJOR",
                    "bg-yellow-100 text-yellow-800": controversy.data.impact === "MODERATE",
                    "bg-green-100 text-green-800": controversy.data.impact === "MINOR",
                  },
                ]}
              >
                {controversy.data.impact} Impact
              </span>
              <span
                class:list={[
                  "px-3 py-1 text-sm font-medium rounded-full",
                  {
                    "bg-yellow-50 text-yellow-700": controversy.data.status === "ALLEGED",
                    "bg-green-50 text-green-700": controversy.data.status === "CONFIRMED",
                    "bg-red-50 text-red-700": controversy.data.status === "DISPROVEN",
                  },
                ]}
              >
                {controversy.data.status}
              </span>
            </div>
          </div>
          <p class="text-lg text-gray-600">{controversy.data.description}</p>
        </div>

        <!-- Metadata -->
        <div class="flex flex-wrap gap-4 text-sm text-gray-500 mb-6 pb-6 border-b">
          <div>
            <span class="font-medium">Date:</span>{" "}
            {new Date(controversy.data.date).toLocaleDateString()}
          </div>
          <div>
            <span class="font-medium">Created:</span>{" "}
            {new Date(controversy.data.createdAt).toLocaleDateString()}
          </div>
          <div>
            <span class="font-medium">Last Updated:</span>{" "}
            {new Date(controversy.data.updatedAt).toLocaleDateString()}
          </div>
        </div>

        <!-- Categories -->
        {
          categories.length > 0 && (
            <div class="mb-6">
              <h2 class="text-sm font-medium text-gray-500 mb-2">Categories</h2>
              <div class="flex flex-wrap gap-2">
                {categories.map((category) => (
                  <span class="px-3 py-1 bg-purple-50 text-purple-700 rounded-full text-sm">{category.data.name}</span>
                ))}
              </div>
            </div>
          )
        }

        <!-- Involved Entities -->
        <div class="mb-8">
          <h2 class="text-sm font-medium text-gray-500 mb-4">Involved Entities</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            {
              entities.map((entity) => (
                <a
                  href={`/entities/${entity.id}`}
                  class="block bg-orange-50/30 hover:bg-orange-50 transition-colors rounded-lg border border-orange-100"
                >
                  <div class="p-4">
                    <div class="flex items-center gap-3">
                      {(() => {
                        const initials = entity.data.name
                          .split(" ")
                          .map((word) => word[0])
                          .slice(0, 2)
                          .join("")
                          .toUpperCase()

                        return entity.data.image ? (
                          <Image
                            src={entity.data.image}
                            alt={entity.data.name}
                            class="w-12 h-12 rounded-full object-cover flex-shrink-0 entity-image"
                            width={48}
                            height={48}
                            data-initials={initials}
                          />
                        ) : (
                          <div class="w-12 h-12 rounded-full bg-orange-100 flex items-center justify-center flex-shrink-0 text-orange-700 font-medium">
                            {initials}
                          </div>
                        )
                      })()}
                      <div>
                        <h3 class="font-medium text-gray-900">{entity.data.name}</h3>
                        {entity.data.description && (
                          <p class="text-sm text-gray-600 line-clamp-2">{entity.data.description}</p>
                        )}
                      </div>
                    </div>
                  </div>
                </a>
              ))
            }
          </div>
        </div>

        <!-- Main Content -->
        <div class="prose-sm max-w-none">
          <Content />
        </div>

        <!-- Sources -->
        {
          controversy.data.sources.length > 0 && (
            <div class="mt-8 pt-8 border-t">
              <h2 class="text-xl font-bold text-gray-900 mb-4">Sources</h2>
              <div class="space-y-4">
                {controversy.data.sources.map((source) => (
                  <div class="p-4 bg-gray-50 rounded-lg">
                    <div class="flex items-center justify-between mb-2">
                      <div class="flex items-center gap-2">
                        <h3 class="font-medium text-gray-900">{source.shortName || source.title}</h3>
                        {source.source && source.source.length > 0 && (
                          <div class="flex items-center gap-2">
                            {source.source.map((sourceInfo) => (
                              <>
                                {(() => {
                                  const sourceData = informationSources.get(sourceInfo.id)
                                  if (!sourceData) return null

                                  return (
                                    <>
                                      <dialog
                                        id={sourceInfo.id}
                                        class="mt-8 rounded-xl mx-auto bg-white p-6 transition-all duration-300 shadow-3xl backdrop:backdrop-blur-md backdrop:bg-opacity-50 w-full max-w-2xl"
                                      >
                                        <div class="space-y-4">
                                          {sourceData.name && <h3 class="text-xl font-bold">{sourceData.name}</h3>}

                                          {sourceData.description && (
                                            <div>
                                              <h4 class="text-sm font-medium text-gray-500">Description</h4>
                                              <p class="text-gray-700">{sourceData.description}</p>
                                            </div>
                                          )}

                                          {sourceData.website && (
                                            <div>
                                              <h4 class="text-sm font-medium text-gray-500">Website</h4>
                                              <a
                                                href={sourceData.website}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                class="text-blue-600 hover:underline"
                                              >
                                                {sourceData.website}
                                              </a>
                                            </div>
                                          )}

                                          {sourceData.links?.length > 0 && (
                                            <div>
                                              <h4 class="text-sm font-medium text-gray-500">Additional Links</h4>
                                              <ul class="list-disc list-inside space-y-1">
                                                {sourceData.links.map((link) => (
                                                  <li>
                                                    <a
                                                      href={link}
                                                      target="_blank"
                                                      rel="noopener noreferrer"
                                                      class="text-blue-600 hover:underline"
                                                    >
                                                      {link}
                                                    </a>
                                                  </li>
                                                ))}
                                              </ul>
                                            </div>
                                          )}

                                          <button
                                            type="button"
                                            onclick={`document.getElementById('${sourceInfo.id}').close()`}
                                            class="mt-6 px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 rounded-lg text-sm font-medium transition-colors"
                                          >
                                            Close
                                          </button>
                                        </div>
                                      </dialog>
                                      <button
                                        type="button"
                                        onclick={`document.getElementById('${sourceInfo.id}').showModal()`}
                                        class="px-2 cursor-pointer py-1 bg-blue-50 text-blue-700 rounded text-xs flex items-center gap-1"
                                      >
                                        <span>{sourceData.name}</span>
                                        <svg
                                          xmlns="http://www.w3.org/2000/svg"
                                          class="w-4 h-4"
                                          width="32"
                                          height="32"
                                          viewBox="0 0 24 24"
                                        >
                                          <g
                                            fill="none"
                                            stroke="currentColor"
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                          >
                                            <path d="M3 12a9 9 0 1 0 18 0a9 9 0 0 0-18 0m9-3h.01" />
                                            <path d="M11 12h1v4h1" />
                                          </g>
                                        </svg>
                                      </button>
                                    </>
                                  )
                                })()}
                              </>
                            ))}
                          </div>
                        )}
                      </div>
                      <div class="flex items-center gap-2">
                        <span
                          class:list={[
                            "px-2 py-1 text-xs font-medium rounded",
                            {
                              "bg-red-50 text-red-700": source.reliability === "LOW",
                              "bg-yellow-50 text-yellow-700": source.reliability === "MEDIUM",
                              "bg-green-50 text-green-700": source.reliability === "HIGH",
                            },
                          ]}
                        >
                          {source.reliability} Reliability
                        </span>
                        <span class="px-2 py-1 bg-blue-50 text-blue-700 rounded text-xs">
                          {source.type.replace(/_/g, " ")}
                        </span>
                      </div>
                    </div>
                    {source.description && <p class="text-sm text-gray-600 mb-2">{source.description}</p>}
                    <a
                      href={source.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-sm text-blue-600 hover:underline"
                    >
                      View Source →
                    </a>
                    <div class="text-xs text-gray-500 mt-2">
                      Published: {new Date(source.publishedAt).toLocaleDateString()}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )
        }

        <div class="max-w-4xl mx-auto mt-8">
          <div class="p-4 bg-transparent rounded-lg border border-blue-100">
            <h2 class="text-xl font-bold text-gray-800 mb-2">Contribuez à cet article</h2>
            <p class="text-gray-700">
              Cet article fait partie d'un projet open source et collaboratif. Vous pouvez aider à l'améliorer en
              modifiant son contenu et en y apportant vos idées et corrections. Consultez notre <a
                href="https://github.com/MatteoGauthier/casseroles.org"
                target="_blank"
                rel="noopener noreferrer"
                class="text-blue-600 hover:underline">dépôt GitHub</a
              > pour contribuer dès maintenant !
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Contribution Notice -->
</Layout>

<script>
  document.querySelectorAll(".entity-image").forEach((img) => {
    img.addEventListener("error", (e) => {
      const target = e.target as HTMLImageElement
      const initials = target.dataset.initials
      target.style.display = "none"
      target.insertAdjacentHTML(
        "afterend",
        `<div class="w-12 h-12 rounded-full bg-orange-100 flex items-center justify-center flex-shrink-0 text-orange-700 font-medium">${initials}</div>`
      )
    })
  })
</script>
